Dynamic Programming :

			Main Problem [1,2,5]

					[1] SubProblem 1 --> 5
					*********5******

					[1,2] SubProblem 2 --> 3
						*********3****** prev


					[1,2,5]SubProblem3 --> 1 current

					Math.min(current, prev); Math.min(1,3) = 1

					....
					....
					...


ATM [1,2,5]  --> targetAmount = 500 :: [Optimlal Result --> Minimal Note]

	   [1] ---> 5[100] = 5 Note
	   [1,2] ---> 2[200] + 1[100] = 3  Note
	   [1,2,5] --> 1[500] Optimal Result = 1 Note


	*******
	target --> nth problem n=3

			SubProblem(2) , sp(n-2) , sp(n-1) .... n > 0
			SubProblem(2) , sp(1) .... n > 0

	Top Down --> : n ---> 

	Bottom Up --> : sp(1) --> sp(2) --> sp(3)


			i:0

	i:1      		i:1


i:2     i:2     i:2    i:2


********

(1) -> (2) -> (3) -> (4) iterative moving on step by step  bottom-up

(1) <- (2) <- (3) <- (4) recursive top-down

***********************

Fib - Pattern :

		0,1,1,2,3,5,8, --> 13 --> 21 --> 34 --> 55 --> 
		f(n) --> f(n-1) + f(n-2)

 House Robber --> nums:[1,2,3,1]  Max Profit :  4
 		
 		[1] --> MaxProfit : 1

 		[1,2] --> MaxProfit : Math.max(h1, h2) --> 2

 	[1,2,3] -->  Math.max(include, exclude) --> Math.max(3+1, 2) --> Max:4

 		[1,2,3,1] --> Math.max(include, exclude) -->
 						Math.max(1+2,4) --> Max:4


  int[] dp = new int[nums.length];// State

  // Base Subproblems
  dp[0] = 1
  dp[1] = Math.max(nums[0], nums[1]) = Math.max(1,2) = 2

  // fib-pattern
  dp[i] = Math.max(include, exclude)
  		  Math.max( nums[i]+dp[i-2] , dp[i-1])



Greedy - pattern :


Knapsack - (0/1- Bounded) Pattern :


Knapsack - (unbounded) Pattern :

String pattern

Unique Path Pattern


















